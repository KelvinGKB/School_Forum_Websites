#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment_Web_Application_
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Forum")]
	public partial class ForumDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBookmark(Bookmark instance);
    partial void UpdateBookmark(Bookmark instance);
    partial void DeleteBookmark(Bookmark instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertFriends_List(Friends_List instance);
    partial void UpdateFriends_List(Friends_List instance);
    partial void DeleteFriends_List(Friends_List instance);
    partial void InsertGroup_Member(Group_Member instance);
    partial void UpdateGroup_Member(Group_Member instance);
    partial void DeleteGroup_Member(Group_Member instance);
    partial void InsertGroupProfile(GroupProfile instance);
    partial void UpdateGroupProfile(GroupProfile instance);
    partial void DeleteGroupProfile(GroupProfile instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertSubCategory(SubCategory instance);
    partial void UpdateSubCategory(SubCategory instance);
    partial void DeleteSubCategory(SubCategory instance);
    partial void InsertLike(Like instance);
    partial void UpdateLike(Like instance);
    partial void DeleteLike(Like instance);
    partial void InsertAdvertisment(Advertisment instance);
    partial void UpdateAdvertisment(Advertisment instance);
    partial void DeleteAdvertisment(Advertisment instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    #endregion
		
		public ForumDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ForumConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bookmark> Bookmarks
		{
			get
			{
				return this.GetTable<Bookmark>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Friends_List> Friends_Lists
		{
			get
			{
				return this.GetTable<Friends_List>();
			}
		}
		
		public System.Data.Linq.Table<Group_Member> Group_Members
		{
			get
			{
				return this.GetTable<Group_Member>();
			}
		}
		
		public System.Data.Linq.Table<GroupProfile> GroupProfiles
		{
			get
			{
				return this.GetTable<GroupProfile>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<SubCategory> SubCategories
		{
			get
			{
				return this.GetTable<SubCategory>();
			}
		}
		
		public System.Data.Linq.Table<Like> Likes
		{
			get
			{
				return this.GetTable<Like>();
			}
		}
		
		public System.Data.Linq.Table<Advertisment> Advertisments
		{
			get
			{
				return this.GetTable<Advertisment>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bookmark")]
	public partial class Bookmark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _postID;
		
		private string _userID;
		
		private System.Nullable<System.DateTime> _date;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpostIDChanging(string value);
    partial void OnpostIDChanged();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    #endregion
		
		public Bookmark()
		{
			this._Post = default(EntityRef<Post>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string postID
		{
			get
			{
				return this._postID;
			}
			set
			{
				if ((this._postID != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpostIDChanging(value);
					this.SendPropertyChanging();
					this._postID = value;
					this.SendPropertyChanged("postID");
					this.OnpostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Bookmark", Storage="_Post", ThisKey="postID", OtherKey="postID", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Bookmarks.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Bookmarks.Add(this);
						this._postID = value.postID;
					}
					else
					{
						this._postID = default(string);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Bookmark", Storage="_UserProfile", ThisKey="userID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Bookmarks.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Bookmarks.Add(this);
						this._userID = value.UserID;
					}
					else
					{
						this._userID = default(string);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _catID;
		
		private string _title;
		
		private EntitySet<SubCategory> _SubCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncatIDChanging(string value);
    partial void OncatIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public Category()
		{
			this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_SubCategory", Storage="_SubCategories", ThisKey="catID", OtherKey="catID")]
		public EntitySet<SubCategory> SubCategories
		{
			get
			{
				return this._SubCategories;
			}
			set
			{
				this._SubCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _comentId;
		
		private string _content;
		
		private string _userId;
		
		private string _postId;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Data.Linq.Binary _image;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncomentIdChanging(string value);
    partial void OncomentIdChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OnuserIdChanging(string value);
    partial void OnuserIdChanged();
    partial void OnpostIdChanging(string value);
    partial void OnpostIdChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    #endregion
		
		public Comment()
		{
			this._Post = default(EntityRef<Post>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comentId", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string comentId
		{
			get
			{
				return this._comentId;
			}
			set
			{
				if ((this._comentId != value))
				{
					this.OncomentIdChanging(value);
					this.SendPropertyChanging();
					this._comentId = value;
					this.SendPropertyChanged("comentId");
					this.OncomentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postId", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string postId
		{
			get
			{
				return this._postId;
			}
			set
			{
				if ((this._postId != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpostIdChanging(value);
					this.SendPropertyChanging();
					this._postId = value;
					this.SendPropertyChanged("postId");
					this.OnpostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Comment", Storage="_Post", ThisKey="postId", OtherKey="postID", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._postId = value.postID;
					}
					else
					{
						this._postId = default(string);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Comment", Storage="_UserProfile", ThisKey="userId", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._userId = value.UserID;
					}
					else
					{
						this._userId = default(string);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friends_List")]
	public partial class Friends_List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userId;
		
		private System.Nullable<System.DateTime> _date;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(string value);
    partial void OnuserIdChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    #endregion
		
		public Friends_List()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Friends_List", Storage="_UserProfile", ThisKey="userId", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Friends_List = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Friends_List = this;
						this._userId = value.UserID;
					}
					else
					{
						this._userId = default(string);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Group_Member")]
	public partial class Group_Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userID;
		
		private string _grpID;
		
		private string _position;
		
		private EntityRef<GroupProfile> _GroupProfile;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OngrpIDChanging(string value);
    partial void OngrpIDChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    #endregion
		
		public Group_Member()
		{
			this._GroupProfile = default(EntityRef<GroupProfile>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grpID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string grpID
		{
			get
			{
				return this._grpID;
			}
			set
			{
				if ((this._grpID != value))
				{
					if (this._GroupProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngrpIDChanging(value);
					this.SendPropertyChanging();
					this._grpID = value;
					this.SendPropertyChanged("grpID");
					this.OngrpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="Char(1)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupProfile_Group_Member", Storage="_GroupProfile", ThisKey="grpID", OtherKey="grpID", IsForeignKey=true)]
		public GroupProfile GroupProfile
		{
			get
			{
				return this._GroupProfile.Entity;
			}
			set
			{
				GroupProfile previousValue = this._GroupProfile.Entity;
				if (((previousValue != value) 
							|| (this._GroupProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupProfile.Entity = null;
						previousValue.Group_Members.Remove(this);
					}
					this._GroupProfile.Entity = value;
					if ((value != null))
					{
						value.Group_Members.Add(this);
						this._grpID = value.grpID;
					}
					else
					{
						this._grpID = default(string);
					}
					this.SendPropertyChanged("GroupProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Group_Member", Storage="_UserProfile", ThisKey="userID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Group_Members.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Group_Members.Add(this);
						this._userID = value.UserID;
					}
					else
					{
						this._userID = default(string);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupProfile")]
	public partial class GroupProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _grpID;
		
		private string _title;
		
		private EntitySet<Group_Member> _Group_Members;
		
		private EntitySet<Post> _Posts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngrpIDChanging(string value);
    partial void OngrpIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public GroupProfile()
		{
			this._Group_Members = new EntitySet<Group_Member>(new Action<Group_Member>(this.attach_Group_Members), new Action<Group_Member>(this.detach_Group_Members));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grpID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string grpID
		{
			get
			{
				return this._grpID;
			}
			set
			{
				if ((this._grpID != value))
				{
					this.OngrpIDChanging(value);
					this.SendPropertyChanging();
					this._grpID = value;
					this.SendPropertyChanged("grpID");
					this.OngrpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupProfile_Group_Member", Storage="_Group_Members", ThisKey="grpID", OtherKey="grpID")]
		public EntitySet<Group_Member> Group_Members
		{
			get
			{
				return this._Group_Members;
			}
			set
			{
				this._Group_Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupProfile_Post", Storage="_Posts", ThisKey="grpID", OtherKey="grpID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group_Members(Group_Member entity)
		{
			this.SendPropertyChanging();
			entity.GroupProfile = this;
		}
		
		private void detach_Group_Members(Group_Member entity)
		{
			this.SendPropertyChanging();
			entity.GroupProfile = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.GroupProfile = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.GroupProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _postID;
		
		private string _title;
		
		private string _content;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _subID;
		
		private string _userID;
		
		private string _grpID;
		
		private string _image;
		
		private EntitySet<Bookmark> _Bookmarks;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Report> _Reports;
		
		private EntitySet<Like> _Likes;
		
		private EntityRef<GroupProfile> _GroupProfile;
		
		private EntityRef<SubCategory> _SubCategory;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpostIDChanging(string value);
    partial void OnpostIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnsubIDChanging(string value);
    partial void OnsubIDChanged();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OngrpIDChanging(string value);
    partial void OngrpIDChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    #endregion
		
		public Post()
		{
			this._Bookmarks = new EntitySet<Bookmark>(new Action<Bookmark>(this.attach_Bookmarks), new Action<Bookmark>(this.detach_Bookmarks));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._Likes = new EntitySet<Like>(new Action<Like>(this.attach_Likes), new Action<Like>(this.detach_Likes));
			this._GroupProfile = default(EntityRef<GroupProfile>);
			this._SubCategory = default(EntityRef<SubCategory>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string postID
		{
			get
			{
				return this._postID;
			}
			set
			{
				if ((this._postID != value))
				{
					this.OnpostIDChanging(value);
					this.SendPropertyChanging();
					this._postID = value;
					this.SendPropertyChanged("postID");
					this.OnpostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subID", DbType="Char(10)")]
		public string subID
		{
			get
			{
				return this._subID;
			}
			set
			{
				if ((this._subID != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubIDChanging(value);
					this.SendPropertyChanging();
					this._subID = value;
					this.SendPropertyChanged("subID");
					this.OnsubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Char(10)")]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grpID", DbType="Char(10)")]
		public string grpID
		{
			get
			{
				return this._grpID;
			}
			set
			{
				if ((this._grpID != value))
				{
					if (this._GroupProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngrpIDChanging(value);
					this.SendPropertyChanging();
					this._grpID = value;
					this.SendPropertyChanged("grpID");
					this.OngrpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(50)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Bookmark", Storage="_Bookmarks", ThisKey="postID", OtherKey="postID")]
		public EntitySet<Bookmark> Bookmarks
		{
			get
			{
				return this._Bookmarks;
			}
			set
			{
				this._Bookmarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Comment", Storage="_Comments", ThisKey="postID", OtherKey="postId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Report", Storage="_Reports", ThisKey="postID", OtherKey="postID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Like", Storage="_Likes", ThisKey="postID", OtherKey="postId")]
		public EntitySet<Like> Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				this._Likes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupProfile_Post", Storage="_GroupProfile", ThisKey="grpID", OtherKey="grpID", IsForeignKey=true)]
		public GroupProfile GroupProfile
		{
			get
			{
				return this._GroupProfile.Entity;
			}
			set
			{
				GroupProfile previousValue = this._GroupProfile.Entity;
				if (((previousValue != value) 
							|| (this._GroupProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupProfile.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._GroupProfile.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._grpID = value.grpID;
					}
					else
					{
						this._grpID = default(string);
					}
					this.SendPropertyChanged("GroupProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Post", Storage="_SubCategory", ThisKey="subID", OtherKey="subID", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._subID = value.subID;
					}
					else
					{
						this._subID = default(string);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Post", Storage="_UserProfile", ThisKey="userID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._userID = value.UserID;
					}
					else
					{
						this._userID = default(string);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookmarks(Bookmark entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Bookmarks(Bookmark entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
		
		private void attach_Likes(Like entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Likes(Like entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _reportID;
		
		private string _reason;
		
		private string _userID;
		
		private string _postID;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreportIDChanging(string value);
    partial void OnreportIDChanged();
    partial void OnreasonChanging(string value);
    partial void OnreasonChanged();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OnpostIDChanging(string value);
    partial void OnpostIDChanged();
    #endregion
		
		public Report()
		{
			this._Post = default(EntityRef<Post>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string reportID
		{
			get
			{
				return this._reportID;
			}
			set
			{
				if ((this._reportID != value))
				{
					this.OnreportIDChanging(value);
					this.SendPropertyChanging();
					this._reportID = value;
					this.SendPropertyChanged("reportID");
					this.OnreportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reason", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string reason
		{
			get
			{
				return this._reason;
			}
			set
			{
				if ((this._reason != value))
				{
					this.OnreasonChanging(value);
					this.SendPropertyChanging();
					this._reason = value;
					this.SendPropertyChanged("reason");
					this.OnreasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string postID
		{
			get
			{
				return this._postID;
			}
			set
			{
				if ((this._postID != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpostIDChanging(value);
					this.SendPropertyChanging();
					this._postID = value;
					this.SendPropertyChanged("postID");
					this.OnpostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Report", Storage="_Post", ThisKey="postID", OtherKey="postID", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._postID = value.postID;
					}
					else
					{
						this._postID = default(string);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Report", Storage="_UserProfile", ThisKey="userID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._userID = value.UserID;
					}
					else
					{
						this._userID = default(string);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategory")]
	public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _subID;
		
		private string _catID;
		
		private string _title;
		
		private EntitySet<Post> _Posts;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubIDChanging(string value);
    partial void OnsubIDChanged();
    partial void OncatIDChanging(string value);
    partial void OncatIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public SubCategory()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string subID
		{
			get
			{
				return this._subID;
			}
			set
			{
				if ((this._subID != value))
				{
					this.OnsubIDChanging(value);
					this.SendPropertyChanging();
					this._subID = value;
					this.SendPropertyChanged("subID");
					this.OnsubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Char(10)")]
		public string catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Post", Storage="_Posts", ThisKey="subID", OtherKey="subID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_SubCategory", Storage="_Category", ThisKey="catID", OtherKey="catID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.SubCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.SubCategories.Add(this);
						this._catID = value.catID;
					}
					else
					{
						this._catID = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Likes")]
	public partial class Like : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userId;
		
		private string _postId;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(string value);
    partial void OnuserIdChanged();
    partial void OnpostIdChanging(string value);
    partial void OnpostIdChanged();
    #endregion
		
		public Like()
		{
			this._Post = default(EntityRef<Post>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postId", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string postId
		{
			get
			{
				return this._postId;
			}
			set
			{
				if ((this._postId != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpostIdChanging(value);
					this.SendPropertyChanging();
					this._postId = value;
					this.SendPropertyChanged("postId");
					this.OnpostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Like", Storage="_Post", ThisKey="postId", OtherKey="postID", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Likes.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Likes.Add(this);
						this._postId = value.postID;
					}
					else
					{
						this._postId = default(string);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Like", Storage="_UserProfile", ThisKey="userId", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Likes.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Likes.Add(this);
						this._userId = value.UserID;
					}
					else
					{
						this._userId = default(string);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Advertisment")]
	public partial class Advertisment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AdID;
		
		private string _image;
		
		private string _link;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdIDChanging(string value);
    partial void OnAdIDChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnlinkChanging(string value);
    partial void OnlinkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Advertisment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AdID
		{
			get
			{
				return this._AdID;
			}
			set
			{
				if ((this._AdID != value))
				{
					this.OnAdIDChanging(value);
					this.SendPropertyChanging();
					this._AdID = value;
					this.SendPropertyChanged("AdID");
					this.OnAdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_link", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string link
		{
			get
			{
				return this._link;
			}
			set
			{
				if ((this._link != value))
				{
					this.OnlinkChanging(value);
					this.SendPropertyChanging();
					this._link = value;
					this.SendPropertyChanged("link");
					this.OnlinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _username;
		
		private string _password;
		
		private string _gender;
		
		private string _position;
		
		private string _email;
		
		private string _description;
		
		private string _recaptcha;
		
		private string _image;
		
		private string _socialId;
		
		private string _name;
		
		private string _privacy;
		
		private EntitySet<Bookmark> _Bookmarks;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Friends_List> _Friends_List;
		
		private EntitySet<Group_Member> _Group_Members;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<Report> _Reports;
		
		private EntitySet<Like> _Likes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnrecaptchaChanging(string value);
    partial void OnrecaptchaChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnsocialIdChanging(string value);
    partial void OnsocialIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnprivacyChanging(string value);
    partial void OnprivacyChanged();
    #endregion
		
		public UserProfile()
		{
			this._Bookmarks = new EntitySet<Bookmark>(new Action<Bookmark>(this.attach_Bookmarks), new Action<Bookmark>(this.detach_Bookmarks));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Friends_List = default(EntityRef<Friends_List>);
			this._Group_Members = new EntitySet<Group_Member>(new Action<Group_Member>(this.attach_Group_Members), new Action<Group_Member>(this.detach_Group_Members));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._Likes = new EntitySet<Like>(new Action<Like>(this.attach_Likes), new Action<Like>(this.detach_Likes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(100)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(6)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="VarChar(10)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recaptcha", DbType="VarChar(10)")]
		public string recaptcha
		{
			get
			{
				return this._recaptcha;
			}
			set
			{
				if ((this._recaptcha != value))
				{
					this.OnrecaptchaChanging(value);
					this.SendPropertyChanging();
					this._recaptcha = value;
					this.SendPropertyChanged("recaptcha");
					this.OnrecaptchaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(250)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_socialId", DbType="VarChar(100)")]
		public string socialId
		{
			get
			{
				return this._socialId;
			}
			set
			{
				if ((this._socialId != value))
				{
					this.OnsocialIdChanging(value);
					this.SendPropertyChanging();
					this._socialId = value;
					this.SendPropertyChanged("socialId");
					this.OnsocialIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_privacy", DbType="VarChar(8)")]
		public string privacy
		{
			get
			{
				return this._privacy;
			}
			set
			{
				if ((this._privacy != value))
				{
					this.OnprivacyChanging(value);
					this.SendPropertyChanging();
					this._privacy = value;
					this.SendPropertyChanged("privacy");
					this.OnprivacyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Bookmark", Storage="_Bookmarks", ThisKey="UserID", OtherKey="userID")]
		public EntitySet<Bookmark> Bookmarks
		{
			get
			{
				return this._Bookmarks;
			}
			set
			{
				this._Bookmarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Comment", Storage="_Comments", ThisKey="UserID", OtherKey="userId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Friends_List", Storage="_Friends_List", ThisKey="UserID", OtherKey="userId", IsUnique=true, IsForeignKey=false)]
		public Friends_List Friends_List
		{
			get
			{
				return this._Friends_List.Entity;
			}
			set
			{
				Friends_List previousValue = this._Friends_List.Entity;
				if (((previousValue != value) 
							|| (this._Friends_List.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Friends_List.Entity = null;
						previousValue.UserProfile = null;
					}
					this._Friends_List.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
					}
					this.SendPropertyChanged("Friends_List");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Group_Member", Storage="_Group_Members", ThisKey="UserID", OtherKey="userID")]
		public EntitySet<Group_Member> Group_Members
		{
			get
			{
				return this._Group_Members;
			}
			set
			{
				this._Group_Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Post", Storage="_Posts", ThisKey="UserID", OtherKey="userID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Report", Storage="_Reports", ThisKey="UserID", OtherKey="userID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Like", Storage="_Likes", ThisKey="UserID", OtherKey="userId")]
		public EntitySet<Like> Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				this._Likes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookmarks(Bookmark entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Bookmarks(Bookmark entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Group_Members(Group_Member entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Group_Members(Group_Member entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Likes(Like entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Likes(Like entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
}
#pragma warning restore 1591
